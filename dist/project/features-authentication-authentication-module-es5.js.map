{"version":3,"sources":["webpack:///src/app/features/authentication/authentication-routing.module.ts","webpack:///src/app/features/authentication/pages/login/login.page.ts","webpack:///src/app/features/authentication/pages/login/login.page.html","webpack:///src/app/features/authentication/authentication.module.ts","webpack:///src/app/features/authentication/pages/signup/signup.page.ts","webpack:///src/app/features/authentication/pages/signup/signup.page.html"],"names":["routes","path","component","AuthenticationRoutingModule","forChild","imports","exports","LoginPage","authService","router","requiredFields","fieldErrors","Map","errorMessage","undefined","isFormValid","signIn","login","password","subscribe","logged","error","navigateByUrl","fieldName","get","errorCount","field","isBlank","trim","length","set","onLogin","templateUrl","styleUrls","AuthenticationModule","declarations","providers","SignupPage","user","address","city","email","firstName","lastName","phoneNumber","postCode","register","Error","onSignup","onDemoButtonClick"],"mappings":"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","file":"features-authentication-authentication-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {LoginPage} from './pages/login/login.page';\nimport {SignupPage} from './pages/signup/signup.page';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginPage },\n  { path: 'signup', component: SignupPage },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthenticationRoutingModule {\n\n}\n","import {Component, OnInit} from '@angular/core';\nimport {SimpleAuthenticationService} from '../../services/simple-authentication.service';\nimport {Router} from '@angular/router';\n\n@Component({\n    templateUrl: './login.page.html',\n    styleUrls: ['./login.page.css']\n})\nexport class LoginPage implements OnInit {\n    requiredFields: (keyof LoginPage)[] = [\n        'login', 'password'\n    ];\n\n    fieldErrors = new Map<string, string>();\n\n    login: string;\n    password: string;\n    errorMessage?: string;\n\n    constructor(private authService: SimpleAuthenticationService,\n                private router: Router) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onLogin(): void {\n        this.errorMessage = undefined;\n\n        if (this.isFormValid()) {\n            this.authService.signIn(this.login, this.password)\n                .subscribe(logged => {\n                    if (logged.error) {\n                        this.errorMessage = logged.error;\n                    } else {\n                        this.router.navigateByUrl('/');\n                    }\n                });\n        } else {\n            this.errorMessage = 'Veuillez renseigner tous les champs.';\n        }\n    }\n\n    hasFieldError(fieldName: string): boolean {\n        return this.fieldErrors.get(fieldName) != null;\n    }\n\n    private isFormValid(): boolean {\n        let errorCount = 0;\n\n        for (const field of this.requiredFields) {\n            const isBlank = ! this[field]\n                || (this[field] as string).trim().length === 0;\n\n            if (isBlank) {\n                this.fieldErrors.set(field, 'required');\n                errorCount++;\n            } else {\n                this.fieldErrors.delete(field);\n            }\n        }\n\n        return errorCount === 0;\n    }\n}\n","<div class=\"form-group\" style=\"padding:3%\">\n    <h4>M'identifier</h4>\n    <div class=\"form-group\">\n        <label for=\"login\">Identifiant</label>\n        <input type=\"text\" class=\"form-control\" id=\"login\" [(ngModel)]=\"login\"/>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"password\">Mot de passe</label>\n        <input type=\"password\" class=\"form-control\" [(ngModel)]=\"password\" id=\"password\"/>\n    </div>\n    <div class=\"form-group\">\n        <input type=\"button\" class=\"btn btn-primary mr-1\" (click)=\"onLogin()\" id=\"btnSearch\" value=\"Envoyer\"/>\n    </div>\n    <div style=\"padding: 10px\" *ngIf=\"errorMessage && errorMessage.length > 0\">\n        <span class=\"alert alert-danger\" id=\"msg\">{{errorMessage}}</span>\n    </div>\n    <a href=\"\" routerLink=\"../signup\">Créer un compte</a>\n</div>\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {LoginPage} from './pages/login/login.page';\nimport {AuthenticationRoutingModule} from './authentication-routing.module';\nimport {SignupPage} from './pages/signup/signup.page';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {AuthGuard} from './guards/auth.guard';\n\n@NgModule({\n    declarations: [\n        LoginPage,\n        SignupPage,\n    ],\n    imports: [\n        CommonModule,\n        AuthenticationRoutingModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    providers: [AuthGuard],\n})\nexport class AuthenticationModule {\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport {SimpleAuthenticationService} from '../../services/simple-authentication.service';\nimport {User} from '../../../catalogue/services/models/user';\nimport {Router} from '@angular/router';\n\n@Component({\n  templateUrl: './signup.page.html',\n  styleUrls: ['./signup.page.css']\n})\nexport class SignupPage implements OnInit {\n\n  requiredFields: (keyof SignupPage)[] = [\n      'login', 'email', 'password'\n  ];\n\n  fieldErrors = new Map<string, string>();\n\n  errorMessage?: string;\n\n  login: string;\n  email: string;\n  password: string;\n  lastName: string;\n  firstName: string;\n  phoneNumber: string;\n  address: string;\n  postCode: string;\n  city: string;\n\n  constructor(private authService: SimpleAuthenticationService,\n              private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  onSignup(): void {\n    if (this.isFormValid()) {\n      const user: User = {\n        address: this.address,\n        city: this.city,\n        email: this.email,\n        firstName: this.firstName,\n        lastName: this.lastName,\n        password: this.password,\n        phoneNumber: this.phoneNumber,\n        postCode: this.postCode,\n        login: this.login,\n      };\n\n      this.errorMessage = undefined;\n\n      this.authService.register(user)\n          .subscribe(logged => {\n            if (logged.error) {\n              this.errorMessage = logged.error;\n            } else {\n              this.router.navigateByUrl('/');\n            }\n          });\n    }\n  }\n\n  onDemoButtonClick(): void {\n    throw Error('Not implemented');\n  }\n\n  hasFieldError(fieldName: string): boolean {\n    return this.fieldErrors.get(fieldName) != null;\n  }\n\n  private isFormValid(): boolean {\n    let errorCount = 0;\n\n    for (const field of this.requiredFields) {\n      const isBlank = ! this[field]\n          || (this[field] as string).trim().length === 0;\n\n      if (isBlank) {\n        this.fieldErrors.set(field, 'required');\n        errorCount++;\n      } else {\n        this.fieldErrors.delete(field);\n      }\n    }\n\n    return errorCount === 0;\n  }\n}\n","<div class=\"form-group\" style=\"padding:3%\">\n    <h4>Créer un compte</h4>\n    <div class=\"form-group\">\n        <label for=\"login\">Identifiant*</label>\n        <input type=\"text\"\n               class=\"form-control\"\n               id=\"login\"\n               [(ngModel)]=\"login\"\n               [class.error]=\"hasFieldError('login')\"/>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"email\">Adresse e-mail*</label>\n        <input type=\"text\" class=\"form-control\" id=\"email\" [(ngModel)]=\"email\"\n               [class.error]=\"hasFieldError('email')\"/>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"password\">Mot de passe*</label>\n        <input type=\"password\" class=\"form-control\" id=\"password\" [(ngModel)]=\"password\"\n               [class.error]=\"hasFieldError('password')\"/>\n    </div>\n\n    <span class=\"alert alert-info\" style=\"display: block;\">\n        Les informations suivantes sont requises pour proposer ou faire appel à un service sur notre plateforme.\n        Vous pourrez les renseigner et les modifier dans votre espace personnel.\n    </span>\n\n    <div class=\"form-group\">\n        <label for=\"lastName\">Nom</label>\n        <input type=\"text\" class=\"form-control\" id=\"lastName\" [(ngModel)]=\"lastName\"/>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"firstName\">Prénom</label>\n        <input type=\"text\" class=\"form-control\" id=\"firstName\" [(ngModel)]=\"firstName\"/>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"phoneNumber\">Téléphone</label>\n        <input type=\"text\" class=\"form-control\" id=\"phoneNumber\" [(ngModel)]=\"phoneNumber\"/>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"address\">Adresse</label>\n        <input type=\"text\" class=\"form-control\" id=\"address\" [(ngModel)]=\"address\"/>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"postCode\">Code postal</label>\n        <input type=\"text\" class=\"form-control\" id=\"postCode\" [(ngModel)]=\"postCode\"/>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"city\">Ville</label>\n        <input type=\"text\" class=\"form-control\" id=\"city\" [(ngModel)]=\"city\"/>\n    </div>\n\n\n    <div class=\"form-group\">\n        <input type=\"button\" class=\"btn btn-primary mr-1\" (click)=\"onSignup()\" id=\"btnSearch\" value=\"Envoyer\"/>\n    </div>\n    <div style=\"padding: 10px\" *ngIf=\"errorMessage && errorMessage.length > 0\">\n        <span class=\"alert alert-danger\" id=\"msg\">{{errorMessage}}</span>\n    </div>\n    <div class=\"link\" routerLink=\"../login\">Je possède déjà un compte</div>\n    <div class=\"link\" (click)=\"onDemoButtonClick()\">Démo</div>\n</div>\n"]}